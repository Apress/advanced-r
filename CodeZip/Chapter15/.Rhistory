library(checkpoint)
checkpoint("2016-09-04", R.version = "3.3.1", use.knitr = TRUE)

library(shiny)
shinyAppDir(getwd())
shinyAppDir(getwd())
q()
library(checkpoint)
checkpoint("2016-09-04", R.version = "3.3.1", use.knitr = TRUE)
library(shiny)

shinyAppDir(getwd())
q()
library(checkpoint)
checkpoint("2016-09-04", R.version = "3.3.1", use.knitr = TRUE)

library(shiny)
shinyAppDir(getwd())

q()
library(checkpoint)
checkpoint("2016-09-04", R.version = "3.3.1", use.knitr = TRUE)

library(shiny)
shinyAppDir(getwd())

shinyAppDir(getwd())
shinyAppDir(getwd())
shinyAppDir(getwd())

trueScores <- runif(20, .5, .95)
matrix(rbinom(20 * 10, 1, trueScores), 20)
X <- matrix(rbinom(20 * 10, 1, trueScores), 20)
colnames(X) <- paste0("Q", 1:10)
cbind(Student = paste0("S", 1:20), X)
write.table(cbind(Student = paste0("S", 1:20), X), file = "\t")
write.table(cbind(Student = paste0("S", 1:20), X), file = "clipboard", sep = "\t")
write.table(cbind(Student = paste0("S", 1:20), X), file = "clipboard", sep = "\t", row.names = FALSE)
q()
library(data.table)
scores <- as.data.table(read.csv("scores.csv"))


kable(scores)
library(knitr)
library(ltm)
install.packages("ltm")
library(ltm)
library(knitr)
kable(scores)
items <- names(scores)[-1]

scores[, SUM := rowSums(scores[, items, with = FALSE])]

scores
biserial.cor(scores$SUM,scores$Q1, level = 2)
melt(scores, id.vars = c("Student", "SUM"))

scores.long <- melt(scores, id.vars = c("Student", "SUM"))

scores.long[, .(r = biserial.cor(SUM, value, level = 2)), by = variable]

scores.long[, .(
  r = round(biserial.cor(SUM, value, level = 2), 3),
  Perc = round(mean(value) * 100, 1)
  ), by = variable]

## calculate biserial correlation, by item
biserial.results <- scores.long[, .(
  r = round(biserial.cor(SUM, value, level = 2), 3),
  Perc = round(mean(value) * 100, 1)
  ), by = variable][order(r)]

biserial.results
biserial.results <- scores.long[, .(
  r = round(biserial.cor(SUM, value, level = 2), 3),
  Perc = round(mean(value) * 100, 1)
  ), by = variable][order(r, decreasing = TRUE)]

biserial.results
scores
setnames(scores, 1, "Student")

scores
alpha.resuls <- cronbach.alpha(scores[, !c("Student", "SUM"), with=FALSE])

alpha.resuls
alpha.results
alpha.results <- cronbach.alpha(scores[, !c("Student", "SUM"), with=FALSE])

alpha.results
str(alpha.results)
rasch.results <- rasch(scores[,!c("Student", "SUM"), with=FALSE])

rasch.results
summary(rasch.results)
plot(rasch.results)
plot(rasch.results, type = "IIC")
plot(rasch.results, type = "IIC", items = 0)
vals <- plot(rasch.results, type = "IIC", items = 0, plot = FALSE) 
plot(vals[, "z"], 1 / sqrt(vals[, "info"]), type = "l", lwd = 2, xlab = "Ability", ylab = "Standard Error", main = "Standard Error of Measurement")

fit(rasch.results)
names(rasch.results)
alpha.results$alpha
?rasch
fitted(rasch.results)
factor.scores(rasch.results)
scores
kable(biserial.results)
kable(scores)
library(checkpoint)
if (nrow(scores) > 6) {
 row.index <- c(1:3, (nrow(scores)-3):nrow(scores))
}

if (ncol(scores) > 6) {
 col.index <- c(1:3, (ncol(scores)-3):ncol(scores))
}

kable(scores[row.index, col.index, with = FALSE])
q()
